BGD_DECLARE(gdFontPtr) gdFontGetSmall(void);
BGD_DECLARE(gdFontPtr) gdFontGetTiny(void);
BGD_DECLARE(gdFontPtr) gdFontGetMediumBold(void);
BGD_DECLARE(char *) gdImageStringFTCircle(gdImagePtr im,int cx,int cy,double radius,double textRadius,double fillPortion,char *font,double points,char *top,char *bottom,int fgcolor);
BGD_DECLARE(void) gdImageSharpen(gdImagePtr im, int pct);
BGD_DECLARE(gdFontPtr) gdFontGetLarge(void);
BGD_DECLARE(gdFontPtr) gdFontGetGiant(void);
BGD_DECLARE(int) gdColorMapLookup(const gdColorMap color_map, const char *color_name, int *r, int *g, int *b);
BGD_DECLARE(int) gdLayerOverlay(int dest, int src);
BGD_DECLARE(int) gdLayerMultiply(int dest, int src);
BGD_DECLARE(void) gdSetErrorMethod(gdErrorMethod);
BGD_DECLARE(void) gdClearErrorMethod(void);
BGD_DECLARE(gdImagePtr) gdImageCreate(int sx, int sy);
BGD_DECLARE(gdImagePtr) gdImageCreateTrueColor(int sx, int sy);
BGD_DECLARE(gdImagePtr) gdImageCreateFromPng(FILE * fd);
BGD_DECLARE(gdImagePtr) gdImageCreateFromPngCtx(gdIOCtxPtr in);
BGD_DECLARE(gdImagePtr) gdImageCreateFromPngPtr(int size, void *data);
BGD_DECLARE(gdImagePtr) gdImageCreateFromGif(FILE * fd);
BGD_DECLARE(gdImagePtr) gdImageCreateFromGifCtx(gdIOCtxPtr in);
BGD_DECLARE(gdImagePtr) gdImageCreateFromGifPtr(int size, void *data);
BGD_DECLARE(gdImagePtr) gdImageCreateFromWBMP(FILE * inFile);
BGD_DECLARE(gdImagePtr) gdImageCreateFromWBMPCtx(gdIOCtxPtr infile);
BGD_DECLARE(gdImagePtr) gdImageCreateFromWBMPPtr(int size, void *data);
BGD_DECLARE(gdImagePtr) gdImageCreateFromJpeg(FILE * infile);
BGD_DECLARE(gdImagePtr) gdImageCreateFromJpegEx(FILE * infile, int ignore_warning);
BGD_DECLARE(gdImagePtr) gdImageCreateFromJpegCtx(gdIOCtxPtr infile);
BGD_DECLARE(gdImagePtr) gdImageCreateFromJpegCtxEx(gdIOCtxPtr infile, int ignore_warning);
BGD_DECLARE(gdImagePtr) gdImageCreateFromJpegPtr(int size, void *data);
BGD_DECLARE(gdImagePtr) gdImageCreateFromJpegPtrEx(int size, void *data, int ignore_warning);
BGD_DECLARE(gdImagePtr) gdImageCreateFromWebp(FILE * inFile);
BGD_DECLARE(gdImagePtr) gdImageCreateFromWebpPtr(int size, void *data);
BGD_DECLARE(gdImagePtr) gdImageCreateFromWebpCtx(gdIOCtxPtr infile);
BGD_DECLARE(gdImagePtr) gdImageCreateFromHeif(FILE *inFile);
BGD_DECLARE(gdImagePtr) gdImageCreateFromHeifPtr(int size, void *data);
BGD_DECLARE(gdImagePtr) gdImageCreateFromHeifCtx(gdIOCtxPtr infile);
BGD_DECLARE(gdImagePtr) gdImageCreateFromAvif(FILE *inFile);
BGD_DECLARE(gdImagePtr) gdImageCreateFromAvifPtr(int size, void *data);
BGD_DECLARE(gdImagePtr) gdImageCreateFromAvifCtx(gdIOCtxPtr infile);
BGD_DECLARE(gdImagePtr) gdImageCreateFromTiff(FILE *inFile);
BGD_DECLARE(gdImagePtr) gdImageCreateFromTiffCtx(gdIOCtxPtr infile);
BGD_DECLARE(gdImagePtr) gdImageCreateFromTiffPtr(int size, void *data);
BGD_DECLARE(gdImagePtr) gdImageCreateFromTga(FILE * fp);
BGD_DECLARE(gdImagePtr) gdImageCreateFromTgaCtx(gdIOCtxPtr ctx);
BGD_DECLARE(gdImagePtr) gdImageCreateFromTgaPtr(int size, void *data);
BGD_DECLARE(gdImagePtr) gdImageCreateFromBmp(FILE * inFile);
BGD_DECLARE(gdImagePtr) gdImageCreateFromBmpPtr(int size, void *data);
BGD_DECLARE(gdImagePtr) gdImageCreateFromBmpCtx(gdIOCtxPtr infile);
BGD_DECLARE(gdImagePtr) gdImageCreateFromFile(const char *filename);
BGD_DECLARE(gdImagePtr) gdImageCreateFromPngSource(gdSourcePtr in);
BGD_DECLARE(gdImagePtr) gdImageCreateFromGd(FILE * in);
BGD_DECLARE(gdImagePtr) gdImageCreateFromGdCtx(gdIOCtxPtr in);
BGD_DECLARE(gdImagePtr) gdImageCreateFromGdPtr(int size, void *data);
BGD_DECLARE(gdImagePtr) gdImageCreateFromGd2(FILE * in);
BGD_DECLARE(gdImagePtr) gdImageCreateFromGd2Ctx(gdIOCtxPtr in);
BGD_DECLARE(gdImagePtr) gdImageCreateFromGd2Ptr(int size, void *data);
BGD_DECLARE(gdImagePtr) gdImageCreateFromGd2Part(FILE * in, int srcx, int srcy, int w,int h);
BGD_DECLARE(gdImagePtr) gdImageCreateFromGd2PartCtx(gdIOCtxPtr in, int srcx, int srcy,int w, int h);
BGD_DECLARE(gdImagePtr) gdImageCreateFromGd2PartPtr(int size, void *data, int srcx, int srcy,int w, int h);
BGD_DECLARE(gdImagePtr) gdImageCreateFromXbm(FILE * in);
BGD_DECLARE(void) gdImageXbmCtx(gdImagePtr image, char* file_name, int fg, gdIOCtxPtr out);
BGD_DECLARE(gdImagePtr) gdImageCreateFromXpm(char *filename);
BGD_DECLARE(void) gdImageDestroy(gdImagePtr im);
BGD_DECLARE(void) gdImageSetPixel(gdImagePtr im, int x, int y, int color);
BGD_DECLARE(int) gdImageGetPixel(gdImagePtr im, int x, int y);
BGD_DECLARE(int) gdImageGetTrueColorPixel(gdImagePtr im, int x, int y);
BGD_DECLARE(void) gdImageAABlend(gdImagePtr im);
BGD_DECLARE(void) gdImageLine(gdImagePtr im, int x1, int y1, int x2, int y2, int color);
BGD_DECLARE(void) gdImageDashedLine(gdImagePtr im, int x1, int y1, int x2, int y2,int color);
BGD_DECLARE(void) gdImageRectangle(gdImagePtr im, int x1, int y1, int x2, int y2,int color);
BGD_DECLARE(void) gdImageFilledRectangle(gdImagePtr im, int x1, int y1, int x2, int y2,int color);
BGD_DECLARE(void) gdImageSetClip(gdImagePtr im, int x1, int y1, int x2, int y2);
BGD_DECLARE(void) gdImageGetClip(gdImagePtr im, int *x1P, int *y1P, int *x2P, int *y2P);
BGD_DECLARE(void) gdImageSetResolution(gdImagePtr im, const unsigned int res_x, const unsigned int res_y);
BGD_DECLARE(int) gdImageBoundsSafe(gdImagePtr im, int x, int y);
BGD_DECLARE(void) gdImageChar(gdImagePtr im, gdFontPtr f, int x, int y, int c,int color);
BGD_DECLARE(void) gdImageCharUp(gdImagePtr im, gdFontPtr f, int x, int y, int c,int color);
BGD_DECLARE(void) gdImageString(gdImagePtr im, gdFontPtr f, int x, int y,unsigned char *s, int color);
BGD_DECLARE(void) gdImageStringUp(gdImagePtr im, gdFontPtr f, int x, int y,unsigned char *s, int color);
BGD_DECLARE(void) gdImageString16(gdImagePtr im, gdFontPtr f, int x, int y,unsigned short *s, int color);
BGD_DECLARE(void) gdImageStringUp16(gdImagePtr im, gdFontPtr f, int x, int y,unsigned short *s, int color);
BGD_DECLARE(void) gdFreeFontCache(void);
BGD_DECLARE(char *) gdImageStringTTF(gdImagePtr im, int *brect, int fg, const char *fontlist,double ptsize, double angle, int x, int y,const char *string);
BGD_DECLARE(char *) gdImageStringFT(gdImagePtr im, int *brect, int fg, const char *fontlist,double ptsize, double angle, int x, int y,const char *string);
BGD_DECLARE(int) gdFTUseFontConfig(int flag);
BGD_DECLARE(char *) gdImageStringFTEx(gdImagePtr im, int *brect, int fg, const char *fontlist,double ptsize, double angle, int x, int y,const char *string, gdFTStringExtraPtr strex);
BGD_DECLARE(void) gdImagePolygon(gdImagePtr im, gdPointPtr p, int n, int c);
BGD_DECLARE(void) gdImageOpenPolygon(gdImagePtr im, gdPointPtr p, int n, int c);
BGD_DECLARE(void) gdImageFilledPolygon(gdImagePtr im, gdPointPtr p, int n, int c);
BGD_DECLARE(int) gdImageColorAllocate(gdImagePtr im, int r, int g, int b);
BGD_DECLARE(int) gdImageColorAllocateAlpha(gdImagePtr im, int r, int g, int b, int a);
BGD_DECLARE(int) gdImageColorClosest(gdImagePtr im, int r, int g, int b);
BGD_DECLARE(int) gdImageColorClosestAlpha(gdImagePtr im, int r, int g, int b, int a);
BGD_DECLARE(int) gdImageColorClosestHWB(gdImagePtr im, int r, int g, int b);
BGD_DECLARE(int) gdImageColorExact(gdImagePtr im, int r, int g, int b);
BGD_DECLARE(int) gdImageColorExactAlpha(gdImagePtr im, int r, int g, int b, int a);
BGD_DECLARE(int) gdImageColorResolve(gdImagePtr im, int r, int g, int b);
BGD_DECLARE(int) gdImageColorResolveAlpha(gdImagePtr im, int r, int g, int b, int a);
BGD_DECLARE(gdImagePtr) gdImageCreatePaletteFromTrueColor(gdImagePtr im, int ditherFlag,int colorsWanted);
BGD_DECLARE(int) gdImageTrueColorToPalette(gdImagePtr im, int ditherFlag,int colorsWanted);
BGD_DECLARE(int) gdImagePaletteToTrueColor(gdImagePtr src);
BGD_DECLARE(int) gdImageColorMatch(gdImagePtr im1, gdImagePtr im2);
BGD_DECLARE(int) gdImageTrueColorToPaletteSetMethod(gdImagePtr im, int method, int speed);
BGD_DECLARE(void) gdImageTrueColorToPaletteSetQuality(gdImagePtr im, int min_quality, int max_quality);
BGD_DECLARE(void) gdImageColorTransparent(gdImagePtr im, int color);
BGD_DECLARE(void) gdImagePaletteCopy(gdImagePtr dst, gdImagePtr src);
BGD_DECLARE(int) gdImageColorReplace(gdImagePtr im, int src, int dst);
BGD_DECLARE(int) gdImageColorReplaceThreshold(gdImagePtr im, int src, int dst, float threshold);
BGD_DECLARE(int) gdImageColorReplaceArray(gdImagePtr im, int len, int *src, int *dst);
BGD_DECLARE(int) gdImageColorReplaceCallback(gdImagePtr im, gdCallbackImageColor callback);
BGD_DECLARE(void) gdImageGif(gdImagePtr im, FILE * out);
BGD_DECLARE(void) gdImagePng(gdImagePtr im, FILE * out);
BGD_DECLARE(void) gdImagePngCtx(gdImagePtr im, gdIOCtxPtr out);
BGD_DECLARE(void) gdImageGifCtx(gdImagePtr im, gdIOCtxPtr out);
BGD_DECLARE(void) gdImageTiff(gdImagePtr im, FILE *outFile);
BGD_DECLARE(void *) gdImageTiffPtr(gdImagePtr im, int *size);
BGD_DECLARE(void) gdImageTiffCtx(gdImagePtr image, gdIOCtxPtr out);
BGD_DECLARE(void *) gdImageBmpPtr(gdImagePtr im, int *size, int compression);
BGD_DECLARE(void) gdImageBmp(gdImagePtr im, FILE *outFile, int compression);
BGD_DECLARE(void) gdImageBmpCtx(gdImagePtr im, gdIOCtxPtr out, int compression);
BGD_DECLARE(void) gdImagePngEx(gdImagePtr im, FILE * out, int level);
BGD_DECLARE(void) gdImagePngCtxEx(gdImagePtr im, gdIOCtxPtr out, int level);
BGD_DECLARE(void) gdImageWBMP(gdImagePtr image, int fg, FILE * out);
BGD_DECLARE(void) gdImageWBMPCtx(gdImagePtr image, int fg, gdIOCtxPtr out);
BGD_DECLARE(int) gdImageFile(gdImagePtr im, const char *filename);
BGD_DECLARE(int) gdSupportsFileType(const char *filename, int writing);
BGD_DECLARE(void) gdFree(void *m);
BGD_DECLARE(void *) gdImageWBMPPtr(gdImagePtr im, int *size, int fg);
BGD_DECLARE(void) gdImageJpeg(gdImagePtr im, FILE * out, int quality);
BGD_DECLARE(void) gdImageJpegCtx(gdImagePtr im, gdIOCtxPtr out, int quality);
BGD_DECLARE(void *) gdImageJpegPtr(gdImagePtr im, int *size, int quality);
BGD_DECLARE(void) gdImageWebpEx(gdImagePtr im, FILE * outFile, int quantization);
BGD_DECLARE(void) gdImageWebp(gdImagePtr im, FILE * outFile);
BGD_DECLARE(void *) gdImageWebpPtr(gdImagePtr im, int *size);
BGD_DECLARE(void *) gdImageWebpPtrEx(gdImagePtr im, int *size, int quantization);
BGD_DECLARE(void) gdImageWebpCtx(gdImagePtr im, gdIOCtxPtr outfile, int quantization);
BGD_DECLARE(void) gdImageHeifEx(gdImagePtr im, FILE *outFile, int quality, gdHeifCodec codec, gdHeifChroma chroma);
BGD_DECLARE(void) gdImageHeif(gdImagePtr im, FILE *outFile);
BGD_DECLARE(void *) gdImageHeifPtr(gdImagePtr im, int *size);
BGD_DECLARE(void *) gdImageHeifPtrEx(gdImagePtr im, int *size, int quality, gdHeifCodec codec, gdHeifChroma chroma);
BGD_DECLARE(void) gdImageHeifCtx(gdImagePtr im, gdIOCtxPtr outfile, int quality, gdHeifCodec codec, gdHeifChroma chroma);
BGD_DECLARE(void) gdImageAvif(gdImagePtr im, FILE *outFile);
BGD_DECLARE(void) gdImageAvifEx(gdImagePtr im, FILE *outFile, int quality, int speed);
BGD_DECLARE(void *) gdImageAvifPtr(gdImagePtr im, int *size);
BGD_DECLARE(void *) gdImageAvifPtrEx(gdImagePtr im, int *size, int quality, int speed);
BGD_DECLARE(void) gdImageAvifCtx(gdImagePtr im, gdIOCtxPtr outfile, int quality, int speed);
BGD_DECLARE(void) gdImageGifAnimBegin(gdImagePtr im, FILE *outFile, int GlobalCM, int Loops);
BGD_DECLARE(void) gdImageGifAnimAdd(gdImagePtr im, FILE *outFile, int LocalCM, int LeftOfs, int TopOfs, int Delay, int Disposal, gdImagePtr previm);
BGD_DECLARE(void) gdImageGifAnimEnd(FILE *outFile);
BGD_DECLARE(void) gdImageGifAnimBeginCtx(gdImagePtr im, gdIOCtxPtr out, int GlobalCM, int Loops);
BGD_DECLARE(void) gdImageGifAnimAddCtx(gdImagePtr im, gdIOCtxPtr out, int LocalCM, int LeftOfs, int TopOfs, int Delay, int Disposal, gdImagePtr previm);
BGD_DECLARE(void) gdImageGifAnimEndCtx(gdIOCtxPtr out);
BGD_DECLARE(void *) gdImageGifAnimBeginPtr(gdImagePtr im, int *size, int GlobalCM, int Loops);
BGD_DECLARE(void *) gdImageGifAnimAddPtr(gdImagePtr im, int *size, int LocalCM, int LeftOfs, int TopOfs, int Delay, int Disposal, gdImagePtr previm);
BGD_DECLARE(void *) gdImageGifAnimEndPtr(int *size);
BGD_DECLARE(void) gdImagePngToSink(gdImagePtr im, gdSinkPtr out);
BGD_DECLARE(void) gdImageGd(gdImagePtr im, FILE * out);
BGD_DECLARE(void) gdImageGd2(gdImagePtr im, FILE * out, int cs, int fmt);
BGD_DECLARE(void *) gdImageGifPtr(gdImagePtr im, int *size);
BGD_DECLARE(void *) gdImagePngPtr(gdImagePtr im, int *size);
BGD_DECLARE(void *) gdImagePngPtrEx(gdImagePtr im, int *size, int level);
BGD_DECLARE(void *) gdImageGdPtr(gdImagePtr im, int *size);
BGD_DECLARE(void *) gdImageGd2Ptr(gdImagePtr im, int cs, int fmt, int *size);
BGD_DECLARE(void) gdImageFilledArc(gdImagePtr im, int cx, int cy, int w, int h, int s,int e, int color, int style);
BGD_DECLARE(void) gdImageArc(gdImagePtr im, int cx, int cy, int w, int h, int s, int e,int color);
BGD_DECLARE(void) gdImageEllipse(gdImagePtr im, int cx, int cy, int w, int h, int color);
BGD_DECLARE(void) gdImageFilledEllipse(gdImagePtr im, int cx, int cy, int w, int h,int color);
BGD_DECLARE(void) gdImageFillToBorder(gdImagePtr im, int x, int y, int border,int color);
BGD_DECLARE(void) gdImageFill(gdImagePtr im, int x, int y, int color);
BGD_DECLARE(void) gdImageCopy(gdImagePtr dst, gdImagePtr src, int dstX, int dstY,int srcX, int srcY, int w, int h);
BGD_DECLARE(void) gdImageCopyMerge(gdImagePtr dst, gdImagePtr src, int dstX, int dstY,int srcX, int srcY, int w, int h, int pct);
BGD_DECLARE(void) gdImageCopyMergeGray(gdImagePtr dst, gdImagePtr src, int dstX,int dstY, int srcX, int srcY, int w, int h,int pct);
BGD_DECLARE(void) gdImageCopyResized(gdImagePtr dst, gdImagePtr src, int dstX, int dstY,int srcX, int srcY, int dstW, int dstH, int srcW,int srcH);
BGD_DECLARE(void) gdImageCopyResampled(gdImagePtr dst, gdImagePtr src, int dstX,int dstY, int srcX, int srcY, int dstW, int dstH,int srcW, int srcH);
BGD_DECLARE(void) gdImageCopyRotated(gdImagePtr dst,gdImagePtr src,double dstX, double dstY,int srcX, int srcY,int srcWidth, int srcHeight, int angle);
BGD_DECLARE(gdImagePtr) gdImageClone(gdImagePtr src);
BGD_DECLARE(void) gdImageSetBrush(gdImagePtr im, gdImagePtr brush);
BGD_DECLARE(void) gdImageSetTile(gdImagePtr im, gdImagePtr tile);
BGD_DECLARE(void) gdImageSetAntiAliased(gdImagePtr im, int c);
BGD_DECLARE(void) gdImageSetAntiAliasedDontBlend(gdImagePtr im, int c, int dont_blend);
BGD_DECLARE(void) gdImageSetStyle(gdImagePtr im, int *style, int noOfPixels);
BGD_DECLARE(void) gdImageSetThickness(gdImagePtr im, int thickness);
BGD_DECLARE(void) gdImageInterlace(gdImagePtr im, int interlaceArg);
BGD_DECLARE(void) gdImageAlphaBlending(gdImagePtr im, int alphaBlendingArg);
BGD_DECLARE(void) gdImageSaveAlpha(gdImagePtr im, int saveAlphaArg);
BGD_DECLARE(gdImagePtr) gdImageNeuQuant(gdImagePtr im, const int max_color, int sample_factor);
BGD_DECLARE(int) gdImagePixelate(gdImagePtr im, int block_size, const unsigned int mode);
BGD_DECLARE(int) gdImageScatter(gdImagePtr im, int sub, int plus);
BGD_DECLARE(int) gdImageScatterColor(gdImagePtr im, int sub, int plus, int colors[], unsigned int num_colors);
BGD_DECLARE(int) gdImageScatterEx(gdImagePtr im, gdScatterPtr s);
BGD_DECLARE(int) gdImageSmooth(gdImagePtr im, float weight);
BGD_DECLARE(int) gdImageMeanRemoval(gdImagePtr im);
BGD_DECLARE(int) gdImageEmboss(gdImagePtr im);
BGD_DECLARE(int) gdImageGaussianBlur(gdImagePtr im);
BGD_DECLARE(int) gdImageEdgeDetectQuick(gdImagePtr src);
BGD_DECLARE(int) gdImageSelectiveBlur(gdImagePtr src);
BGD_DECLARE(int) gdImageConvolution(gdImagePtr src, float filter[3][3], float filter_div, float offset);
BGD_DECLARE(int) gdImageColor(gdImagePtr src, const int red, const int green, const int blue, const int alpha);
BGD_DECLARE(int) gdImageContrast(gdImagePtr src, double contrast);
BGD_DECLARE(int) gdImageBrightness(gdImagePtr src, int brightness);
BGD_DECLARE(int) gdImageGrayScale(gdImagePtr src);
BGD_DECLARE(int) gdImageNegate(gdImagePtr src);
BGD_DECLARE(gdImagePtr) gdImageCopyGaussianBlurred(gdImagePtr src, int radius,double sigma);
BGD_DECLARE(gdIOCtxPtr) gdNewDynamicCtx(int size, void *data);
BGD_DECLARE(gdIOCtxPtr) gdNewDynamicCtxEx(int size, void *data, int freeFlag);
BGD_DECLARE(gdIOCtxPtr) gdNewSSCtx(gdSourcePtr in, gdSinkPtr out);
BGD_DECLARE(void *) gdDPExtractData(gdIOCtxPtr ctx, int *size);
BGD_DECLARE(int) gdImageCompare(gdImagePtr im1, gdImagePtr im2);
BGD_DECLARE(void) gdImageFlipHorizontal(gdImagePtr im);
BGD_DECLARE(void) gdImageFlipVertical(gdImagePtr im);
BGD_DECLARE(void) gdImageFlipBoth(gdImagePtr im);
BGD_DECLARE(gdImagePtr) gdImageCrop(gdImagePtr src, const gdRect *crop);
BGD_DECLARE(gdImagePtr) gdImageCropAuto(gdImagePtr im, const unsigned int mode);
BGD_DECLARE(gdImagePtr) gdImageCropThreshold(gdImagePtr im, const unsigned int color, const float threshold);
BGD_DECLARE(int) gdImageSetInterpolationMethod(gdImagePtr im, gdInterpolationMethod id);
BGD_DECLARE(gdInterpolationMethod) gdImageGetInterpolationMethod(gdImagePtr im);
BGD_DECLARE(gdImagePtr) gdImageScale(const gdImagePtr src, const unsigned int new_width, const unsigned int new_height);
BGD_DECLARE(gdImagePtr) gdImageRotateInterpolated(const gdImagePtr src, const float angle, int bgcolor);
BGD_DECLARE(int) gdAffineApplyToPointF(gdPointFPtr dst, const gdPointFPtr src, const double affine[6]);
BGD_DECLARE(int) gdAffineInvert(double dst[6], const double src[6]);
BGD_DECLARE(int) gdAffineFlip(double dst_affine[6], const double src_affine[6], const int flip_h, const int flip_v);
BGD_DECLARE(int) gdAffineConcat(double dst[6], const double m1[6], const double m2[6]);
BGD_DECLARE(int) gdAffineIdentity(double dst[6]);
BGD_DECLARE(int) gdAffineScale(double dst[6], const double scale_x, const double scale_y);
BGD_DECLARE(int) gdAffineRotate(double dst[6], const double angle);
BGD_DECLARE(int) gdAffineShearHorizontal(double dst[6], const double angle);
BGD_DECLARE(int) gdAffineShearVertical(double dst[6], const double angle);
BGD_DECLARE(int) gdAffineTranslate(double dst[6], const double offset_x, const double offset_y);
BGD_DECLARE(double) gdAffineExpansion(const double src[6]);
BGD_DECLARE(int) gdAffineRectilinear(const double src[6]);
BGD_DECLARE(int) gdAffineEqual(const double matrix1[6], const double matrix2[6]);
BGD_DECLARE(int) gdTransformAffineGetImage(gdImagePtr *dst, const gdImagePtr src, gdRectPtr src_area, const double affine[6]);
BGD_DECLARE(int) gdTransformAffineCopy(gdImagePtr dst, int dst_x, int dst_y, const gdImagePtr src, gdRectPtr src_region, const double affine[6]);
BGD_DECLARE(int) gdTransformAffineBoundingBox(gdRectPtr src, const double affine[6], gdRectPtr bbox);
BGD_DECLARE(int) gdMajorVersion(void);
BGD_DECLARE(int) gdMinorVersion(void);
BGD_DECLARE(int) gdReleaseVersion(void);
BGD_DECLARE(const char *) gdExtraVersion(void);
BGD_DECLARE(const char *) gdVersionString(void);
